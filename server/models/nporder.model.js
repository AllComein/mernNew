const { DataTypes } = require("sequelize");

module.exports = model;

function model(sequelize) {
  const attributes = {
    exhgseg : { type: DataTypes.STRING(255), allowNull: true },
    userid : { type: DataTypes.STRING(255), allowNull: true },
    accountid : { type: DataTypes.STRING(255), allowNull: true },
    participantcode : { type: DataTypes.STRING(255), allowNull: true },
    buy_sell : { type: DataTypes.STRING(255), allowNull: true },
    tradingsymbol : { type: DataTypes.STRING(255), allowNull: true },
    totalqty : { type: DataTypes.FLOAT, allowNull: true },
    price : { type: DataTypes.FLOAT, allowNull: true },
    status : { type: DataTypes.STRING(255), allowNull: true },
    rejectionreason : { type: DataTypes.STRING(255), allowNull: true },
    nestorderno : { type: DataTypes.STRING(255), allowNull: true },
    nestupdatetime : { type: DataTypes.STRING(255), allowNull: true },
    exchangeorderno : { type: DataTypes.STRING(255), allowNull: true },
    bwl : { type: DataTypes.STRING(255), allowNull: true },
    ordersource : { type: DataTypes.STRING(255), allowNull: true },
    requestid : { type: DataTypes.STRING(255), allowNull: true },
    algoidentifier : { type: DataTypes.STRING(255), allowNull: true },
    exchangealgocategory : { type: DataTypes.STRING(255), allowNull: true },
    guiordernumber : { type: DataTypes.STRING(255), allowNull: true },
    triggerid : { type: DataTypes.STRING(255), allowNull: true },
    sessionindicator : { type: DataTypes.STRING(255), allowNull: true },
    settlementtype : { type: DataTypes.STRING(255), allowNull: true },
    exchangeuserinfo : { type: DataTypes.STRING(255), allowNull: true },
    algoseqnumber : { type: DataTypes.STRING(255), allowNull: true },
    exchangeupdatetime : { type: DataTypes.STRING(255), allowNull: true },
    exchangeentrytime : { type: DataTypes.STRING(255), allowNull: true },
    reforderno : { type: DataTypes.STRING(255), allowNull: true },
    qtyunits : { type: DataTypes.STRING(255), allowNull: true },
    mrktprotection : { type: DataTypes.STRING(255), allowNull: true },
    groupname : { type: DataTypes.STRING(255), allowNull: true },
    comments : { type: DataTypes.STRING(255), allowNull: true },
    validitytime : { type: DataTypes.STRING(255), allowNull: true },
    cobestrate : { type: DataTypes.STRING(255), allowNull: true },
    cotriggerpercentage : { type: DataTypes.STRING(255), allowNull: true },
    orderusermessage : { type: DataTypes.STRING(255), allowNull: true },
    accountname3 : { type: DataTypes.STRING(255), allowNull: true },
    accountname2 : { type: DataTypes.STRING(255), allowNull: true },
    siptrancheno : { type: DataTypes.STRING(255), allowNull: true },
    sipregistrationno : { type: DataTypes.STRING(255), allowNull: true },
    sipperiod : { type: DataTypes.STRING(255), allowNull: true },
    sipmonth : { type: DataTypes.STRING(255), allowNull: true },
    sipdate : { type: DataTypes.STRING(255), allowNull: true },
    sipfrequency : { type: DataTypes.STRING(255), allowNull: true },
    sipsecurity : { type: DataTypes.STRING(255), allowNull: true },
    uniquekey : { type: DataTypes.STRING(255), allowNull: true },
    accountname : { type: DataTypes.STRING(255), allowNull: true },
    conditionstatus : { type: DataTypes.STRING(255), allowNull: true },
    orderplacedby : { type: DataTypes.STRING(255), allowNull: true },
    applicationno : { type: DataTypes.STRING(255), allowNull: true },
    foliono : { type: DataTypes.STRING(255), allowNull: true },
    kyccomplaint3 : { type: DataTypes.STRING(255), allowNull: true },
    kyccomplaint2 : { type: DataTypes.STRING(255), allowNull: true },
    kyccomplaint : { type: DataTypes.STRING(255), allowNull: true },
    pannumber3 : { type: DataTypes.STRING(255), allowNull: true },
    pannumber2 : { type: DataTypes.STRING(255), allowNull: true },
    pannumber : { type: DataTypes.STRING(255), allowNull: true },
    accountid3 : { type: DataTypes.STRING(255), allowNull: true },
    accountid2 : { type: DataTypes.STRING(255), allowNull: true },
    arnno : { type: DataTypes.STRING(255), allowNull: true },
    dpsettlement : { type: DataTypes.STRING(255), allowNull: true },
    moh : { type: DataTypes.STRING(255), allowNull: true },
    dpbenificiaryid : { type: DataTypes.STRING(255), allowNull: true },
    depository : { type: DataTypes.STRING(255), allowNull: true },
    purchasetype : { type: DataTypes.STRING(255), allowNull: true },
    qtyinlots : { type: DataTypes.FLOAT, allowNull: true },
    exchangeaccountid : { type: DataTypes.STRING(255), allowNull: true },
    ordergentype : { type: DataTypes.STRING(255), allowNull: true },
    exchangetimestamp : { type: DataTypes.STRING(255), allowNull: true },
    auctionnumber : { type: DataTypes.STRING(255), allowNull: true },
    branchid : { type: DataTypes.STRING(255), allowNull: true },
    brokerid : { type: DataTypes.STRING(255), allowNull: true },
    markettype : { type: DataTypes.STRING(255), allowNull: true },
    tradedqty : { type: DataTypes.FLOAT, allowNull: true },
    remarks : { type: DataTypes.STRING(255), allowNull: true },
    triggerprice : { type: DataTypes.FLOAT, allowNull: true },
    producttype : { type: DataTypes.STRING(255), allowNull: true },
    ordertype : { type: DataTypes.STRING(255), allowNull: true },
    modifiedbyuser : { type: DataTypes.STRING(255), allowNull: true },
    goodtilldate : { type: DataTypes.STRING(255), allowNull: true },
    validity : { type: DataTypes.STRING(255), allowNull: true },
    pro_cli : { type: DataTypes.STRING(255), allowNull: true },
    disclosedqty : { type: DataTypes.FLOAT, allowNull: true },
    pendingqty : { type: DataTypes.FLOAT, allowNull: true },
    averageprice : { type: DataTypes.FLOAT, allowNull: true },
    optiontype : { type: DataTypes.STRING(255), allowNull: true },
    expirydate : { type: DataTypes.STRING(255), allowNull: true },
    strikeprice : { type: DataTypes.FLOAT, allowNull: true },
    instrumentname : { type: DataTypes.STRING(255), allowNull: true },
    symbol : { type: DataTypes.STRING(255), allowNull: true },

    
    
  };
  /* by default it pluralize the model, so it will tread it as 'People' and query will be like
     select * from People  (if you have pre existing table Person, then it won't get records)
  */
  const options = {
    freezeTableName: true,
    // don't add the timestamp attributes (updatedAt, createdAt)
    timestamps: false,
  };
  return sequelize.define("nporder", attributes, options);
}
